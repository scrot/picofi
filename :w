package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"

	"github.com/allegro/bigcache/v3"
)

// Session is the data that can be customized by the user to personalize
// the calculations, it is used to populate the templates.
type Session struct {
	AnnualIncome   float64      `json:"annual-income"`
	AnnualExpenses float64      `json:"annual-expenses"`
	Savings        []SavingsRow `json:"savings"`
}

// toJSON serializes the SimulationInput as JSON object
func (s Session) toJSON() ([]byte, error) {
	r, err := json.Marshal(s)
	if err != nil {
		return []byte{}, nil
	}
	return r, nil
}

// SavingsRow represents a money deposit with optional interests
type SavingsRow struct {
	Name     string  `json:"name"`
	Amount   float64 `json:"amount"`
	Interest float64 `json:"interest"`
}

// sessionDefaults provides default values for a session
// used for setting up new session and contain sane values
var sessionDefaults = Session{
	AnnualIncome:   70000,
	AnnualExpenses: 50000,
	Savings: []SavingsRow{
		{"Savings Account", 15000, 2},
	},
}

type sessionContextKey interface{}

func (s Server) loadSession(r *http.Request) (Session, error) {
	var data Session
	c, err := r.Cookie("session-id")
	if err != nil {
		return Session{}, fmt.Errorf("no session cookie found: %w", err)
	}

	if id := c.Value; id != "" {
		sd, err := s.sessions.Get(id)
		if err != nil {
			if errors.Is(err, bigcache.ErrEntryNotFound) {
				s.logger.Info(fmt.Sprintf("no session data in cache, loading defaults", id))
				defaults, _ := sessionDefaults.toJSON()
				s.sessions.Set(id, defaults)
			} else {
				return Session{}, fmt.Errorf("loading session data: %w", err)

			}
		}

		s.logger.Info(fmt.Sprintf("found session with id %s in cache", id))

		if err := json.Unmarshal(sd, &data); err != nil {
			return Session{}, fmt.Errorf("parsing session data: %w", err)
		}
	}

	return data, nil
}

func (s Server) saveSession(r *http.Request, update Session) error {
	c, err := r.Cookie("session-id")
	if err != nil {
		return fmt.Errorf("no session cookie found: %w", err)
	}

	if id := c.Value; id != "" {
		s.logger.Info(fmt.Sprintf("found session-id in cookie %s", id))

		obj, err := update.toJSON()
		if err != nil {
			return fmt.Errorf("serializing updated session data: %w", err)
		}

		if err := s.sessions.Set(id, obj); err != nil {
			return fmt.Errorf("storing updated session data: %w", err)
		}
	}

	return nil
}
